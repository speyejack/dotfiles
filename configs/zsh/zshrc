export LANG="en_US.UTF-8"
export LANGUAGE="en_US.UTF-8"
export LC_ALL="en_US.UTF-8"

ZSH=$HOME/.oh-my-zsh

source $ZSH/lib/functions.zsh
source $ZSH/lib/theme-and-appearance.zsh
source $ZSH/lib/git.zsh
source $ZSH/lib/history.zsh
source $ZSH/lib/key-bindings.zsh
source $ZSH/lib/completion.zsh
source $ZSH/lib/misc.zsh
source $ZSH/lib/clipboard.zsh

# Custom prompt
export PROMPT='%B%(4~|%F{cyan}%8>..>%-3~%>>%F{green}%2~|%F{green}%~)%F{cyan}%#%b%f '
export RPROMPT='%F{cyan}%B%t%b%f'

# Preferred utilities
export SHELL='/bin/zsh'
export EDITOR='vim -u NONE'

# Lines configured by zsh-newuser-install
HISTFILE=~/.histfile
HISTSIZE=5000
SAVEHIST=1000
setopt appendhistory autocd beep extendedglob nomatch notify
# End of lines configured by zsh-newuser-install
# The following lines were added by compinstall
zstyle :compinstall filename '/home/jack/.zshrc'

setopt BANG_HIST                 # Treat the '!' character specially during expansion.
setopt EXTENDED_HISTORY          # Write the history file in the ":start:elapsed;command" format.
setopt INC_APPEND_HISTORY        # Write to the history file immediately, not when the shell exits.
setopt SHARE_HISTORY             # Share history between all sessions.
setopt HIST_EXPIRE_DUPS_FIRST    # Expire duplicate entries first when trimming history.
setopt HIST_IGNORE_DUPS          # Don't record an entry that was just recorded again.
setopt HIST_IGNORE_ALL_DUPS      # Delete old recorded entry if new entry is a duplicate.
setopt HIST_FIND_NO_DUPS         # Do not display a line previously found.
setopt HIST_IGNORE_SPACE         # Don't record an entry starting with a space.
setopt HIST_SAVE_NO_DUPS         # Don't write duplicate entries in the history file.
setopt HIST_REDUCE_BLANKS        # Remove superfluous blanks before recording entry.
setopt HIST_VERIFY               # Don't execute immediately upon history expansion.
setopt HIST_BEEP                 # Beep when accessing nonexistent history.

autoload -Uz compinit
compinit

# Make sure that the output of ls is colorized
alias ls='ls --color=auto'
# Allow for nakai's own stupidity with exiting
alias exi='exit'
alias :exi='exit'

# Set python to python3
alias python='python3'
alias pip='pip3'

# Set to vi key binds
bindkey -v
set editing-mode vi
set show-mode-in-prompt on

# Escape sequence for vi key bindings
bindkey jk vi-cmd-mode
bindkey kj vi-cmd-mode

alias togglevi='vi-toggle-normal'
VINORMAL=false

function vi-toggle-normal(){
	if [ $VINORMAL = true ]; then
		VINORMAL=false
	else
		VINORMAL=true
	fi
}

function change-cursor(){
	if [ $TERM = "xterm-termite" ] || [$TERM = "xterm-color256"]; then
		if [ $KEYMAP = vicmd ]; then
			# the command mode for vi
			echo -ne "\e[1 q"
		else
			# the insert mode for vi
			echo -ne "\e[5 q"
		fi
	fi
}

# Changes the cursor
function zle-line-finish zle-keymap-select () {
	change-cursor
}

function zle-line-init (){
	if [ $VINORMAL = true ]; then
		zle -K vicmd;
	fi

	change-cursor
}

function x11-clip-wrap-widgets() {
    # NB: Assume we are the first wrapper and that we only wrap native widgets
    # See zsh-autosuggestions.zsh for a more generic and more robust wrapper
    local copy_or_paste=$1
    shift

    for widget in $@; do
        # Ugh, zsh doesn't have closures
        if [[ $copy_or_paste == "copy" ]]; then
            eval "
            function _x11-clip-wrapped-$widget() {
                zle .$widget
                xclip -in -selection clipboard <<<\$CUTBUFFER
            }
            "
        else
            eval "
            function _x11-clip-wrapped-$widget() {
                CUTBUFFER=\$(xclip -out -selection clipboard)
                zle .$widget
            }
            "
        fi

        zle -N $widget _x11-clip-wrapped-$widget
    done
}


local copy_widgets=(
    vi-yank vi-yank-eol vi-delete vi-backward-kill-word vi-change-whole-line
)
local paste_widgets=(
    vi-put-{before,after}
)

# NB: can atm. only wrap native widgets
x11-clip-wrap-widgets copy $copy_widgets
x11-clip-wrap-widgets paste  $paste_widgets

zle -N zle-keymap-select
zle -N zle-line-init
zle -N zle-line-finish

# Less mode time to switch modes, may cause bugs
export KEYTIMEOUT=10

# Add incremental searching with vi
bindkey -M vicmd '?' history-incremental-search-backward
bindkey -M vicmd '/' history-incremental-search-forward

bindkey "^[OA" up-line-or-beginning-search
bindkey "^[OB" down-line-or-beginning-search
bindkey -M vicmd "k" up-line-or-beginning-search
bindkey -M vicmd "j" down-line-or-beginning-search

bindkey -M vicmd "^V" edit-command-line


# External programs
export PATH="$PATH:/usr/local/avr/bin"

#source ~/anaconda3/etc/profile.d/conda.sh
export PATH="~/anaconda3/bin:$PATH"
export GOPATH="$GOPATH:/home/jack/Dropbox/code/personal/go"

alias dcrun='docker-compose -f ./docker-compose.yml'
alias dclogs='docker-compose -f ./docker-compose.yml logs -tf --tail="50"'

