#+TITLE: My emacs config
#+PROPERTY: header-args :tangle ~/.emacs.d/init.el
* Setup
*** Package
The require for emacs
#+BEGIN_SRC emacs-lisp 
(package-initialize)
#+END_SRC

*** Basic Theme
Some nice setup colors so I don't get blinded by the sun that is regular emacs if theres an error
#+BEGIN_SRC emacs-lisp 
(set-background-color "#002B36")
(set-foreground-color "#2AA198")
(set-face-background 'mode-line "#073642")
#+END_SRC

*** Basic Config
Set up the custom file name
#+BEGIN_SRC emacs-lisp 
(setq custom-file (expand-file-name "custom.el" user-emacs-directory))
(load custom-file 'noerror)
#+END_SRC
Some basic inhibiters to prevent a bunch of annoying screens
#+BEGIN_SRC emacs-lisp 
(setq inhibit-splash-screen t
	  inhibit-startup-message t
	  inhibit-startup-echo-area-message t)
#+END_SRC
Turn off the scroll bar and menu bar
#+BEGIN_SRC emacs-lisp 
(menu-bar-mode -1)
(toggle-scroll-bar -1)
(tool-bar-mode -1)
#+END_SRC
Turn on tab indention and set tab width
#+BEGIN_SRC emacs-lisp 
(setq-default c-basic-offset 4
                  tab-width 4
                  indent-tabs-mode t)
#+END_SRC
Configure where auto saves go and several backup settings
#+BEGIN_SRC emacs-lisp 
(make-directory "~/.emacs.d/autosaves/" t)
(setq auto-save-file-name-transforms '((".*" "~/.emacs.d/autosaves/\\1" t)))
(setq backup-directory-alist `(("." . "~/.emacs.d/backups")))
(setq backup-by-copying t)
(setq delete-old-versions t
  kept-new-versions 6
  kept-old-versions 2
  version-control t)
#+END_SRC
A temporary solution to having to tangling while configuring
#+BEGIN_SRC emacs-lisp 
(defun my/tangle-dotfile ()
  "If the current file is in '~/.dotfiles', the code blocks are tangled"
  (when (equal (buffer-file-name)
               (expand-file-name "~/dotfiles/configs/emacs.d/init.org"))
    (org-babel-tangle)
    (message "Dotfile tangled")))

(add-hook 'after-save-hook #'my/tangle-dotfile)
#+END_SRC

*** Archives
Adding the elpa packages
#+BEGIN_SRC emacs-lisp 
(add-to-list 'package-archives '("org" . "http://orgmode.org/elpa/"))
(add-to-list 'package-archives '("melpa" . "https://melpa.org/packages/"))
(add-to-list 'package-archives '("melpa-stable" . "https://stable.melpa.org/packages/"))
(add-to-list 'package-archives '("elpy" . "https://jorgenschaefer.github.io/packages/"))
#+END_SRC
* Critical Packages
*** use-package
Download and require use package
#+BEGIN_SRC emacs-lisp 
(unless (package-installed-p 'use-package)
  (package-refresh-contents)
  (package-install 'use-package))

(eval-when-compile
  (require 'use-package))
#+END_SRC
Enable ensure for everything
#+BEGIN_SRC emacs-lisp 
(setq use-package-always-ensure t)
(setq use-package-compute-statistics t)
#+END_SRC
** Libraries
*** dash
#+BEGIN_QUOTE
A modern list library for Emacs
#+END_QUOTE
Source: [[https://github.com/magnars/dash.el]]
#+BEGIN_SRC emacs-lisp 
(use-package dash
  :disabled t
  :diminish)
#+END_SRC

*** pdf-tools
#+BEGIN_QUOTE
Support library for PDF documents.
#+END_QUOTE
Source: [[https://github.com/politza/pdf-tools]]
#+BEGIN_SRC emacs-lisp 
(use-package pdf-tools
  :disabled t
  :commands 'doc-view-mode
  :diminish
  :init
  (add-hook 'doc-view-mode-hook 'evil-local-mode)
  :config
  (bind-key (kbd "j") 'doc-view-next-line-or-next-page 'doc-view-mode-map)
  (bind-key (kbd "k") 'doc-view-previous-line-or-previous-page 'doc-view-mode-map)
  (bind-key (kbd "J") 'doc-view-next-page 'doc-view-mode-map)
  (bind-key (kbd "K") 'doc-view-previous-page 'doc-view-mode-map))
#+END_SRC

*** s
#+BEGIN_QUOTE
The long lost Emacs string manipulation library.
#+END_QUOTE
Source: [[https://github.com/magnars/s.el]]
#+BEGIN_SRC emacs-lisp 
(use-package s
  :disabled t
  :diminish)
#+END_SRC
* General Packages
** Evil
*** evil
#+BEGIN_QUOTE
Extensible Vi layer for Emacs.
#+END_QUOTE
Source: [[https://github.com/emacs-evil/evil]]
#+BEGIN_SRC emacs-lisp 
(use-package evil
  :diminish
  :config
  (evil-define-key 'normal global-map (kbd "gh") 'evil-first-non-blank)
  (evil-define-key 'normal global-map (kbd "gl") 'evil-end-of-line)
  (evil-define-key 'normal global-map (kbd "-")  'helm-find-files)
  (setq evil-magic 'very-magic)
  (remove 'doc-view-mode evil-emacs-state-modes)
  (evil-mode 1))
#+END_SRC

*** undo-tree
#+BEGIN_QUOTE
Vim undo tree
#+END_QUOTE
Source: [[https://www.emacswiki.org/emacs/UndoTree]]
#+BEGIN_SRC emacs-lisp 
(use-package undo-tree
  :commands 'undo-tree-visualize
  :diminish)
#+END_SRC

*** evil-escape
#+BEGIN_QUOTE
Escape from anything with a customizable key sequence
#+END_QUOTE
Source: [[https://github.com/syl20bnr/evil-escape]]
#+BEGIN_SRC emacs-lisp 
(use-package evil-escape
  :diminish 
  :after evil
  :config
  (setq-default evil-escape-key-sequence "jk")
  (setq evil-escape-unordered-key-sequence 1)
  (evil-escape-mode 1))
#+END_SRC

*** evil-leader
#+BEGIN_QUOTE
let there be <leader>
#+END_QUOTE
Source: [[https://github.com/cofi/evil-leader]]
#+BEGIN_SRC emacs-lisp 
(use-package evil-leader
  :diminish
  :config
  (evil-leader/set-leader ",")
  (evil-leader/set-key
	","  'other-window
	"/"  'helm-swoop
	"."  'mode-line-other-buffer
	":"  'eval-expression
	"b"  'helm-mini             ;; Switch to another buffer
	"c"  'evil-commentary
	;; Add evil nerd commentary
	"d"  'kill-this-buffer
	"D"  'open-current-line-in-codebase-search
	"e"  'evil-exchange
	"f"  'helm-imenu            ;; Jump to function in buffer
	"g"  'magit-status
	"h"  'git-timemachine       ;; Open git timemachine
	"i"  'use-package-report
	"l"  'whitespace-mode       ;; Show invisible characters
	"nn" 'air-narrow-dwim       ;; Narrow to region and enter normal mode
	"nw" 'widen
	"o"  'delete-other-windows  ;; C-w o
	"p"  'helm-show-kill-ring
	"Pp"  'helm-projectile-switch-project
	"Pf"  'helm-projectile-find-file
	"s"  'ag-project            ;; Ag search from project's root
	"r"  (lambda () (interactive) (revert-buffer :ignore-auto :noconfirm))
	"R"  'restart-emacs
	"t"  'gtags-reindex
	"T"  'gtags-find-tag
	"u"  'undo-tree-visualize
	"v"  'centered-cursor-mode
	"w"  'save-buffer
	"x"  'helm-M-x
	"y"  'yank-to-x-clipboard)
  (global-evil-leader-mode))
#+END_SRC

*** evil-org
#+BEGIN_QUOTE
evil keybindings for org-mode
#+END_QUOTE
Source: [[https://github.com/Somelauw/evil-org-mode]]
#+BEGIN_SRC emacs-lisp 
(use-package evil-org
  :diminish
  :after (evil org)
  :hook (org-mode . evil-org-mode)
  :config
  (add-hook 'evil-org-mode-hook
            (lambda ()
              (evil-org-set-key-theme '(textobjects insert navigation additional shift todo heading)))))
#+END_SRC

*** evil-magit
#+BEGIN_QUOTE
evil-based key bindings for magit
#+END_QUOTE
Source: [[https://github.com/emacs-evil/evil-magit]]
#+BEGIN_SRC emacs-lisp 
(use-package evil-magit
  :after (evil magit)
  :init
  (add-hook 'magit-mode-hook 'evil-local-mode))
#+END_SRC

*** evil-anzu
#+BEGIN_QUOTE
anzu for evil-mode
#+END_QUOTE
Source: [[https://github.com/syohex/emacs-evil-anzu]]
#+BEGIN_SRC emacs-lisp 
(use-package evil-anzu
  :disabled t
  :commands 'evil-search-next
  :diminish
  :after evil)
#+END_SRC

*** evil-args
#+BEGIN_QUOTE
Motions and text objects for delimited arguments in Evil.
#+END_QUOTE
Source: [[https://github.com/wcsmith/evil-args]]
#+BEGIN_SRC emacs-lisp 
(use-package evil-args
  :disabled t
  :diminish
  :after evil
  :config
  ;; bind evil-args text objects
  (define-key evil-inner-text-objects-map "a" 'evil-inner-arg)
  (define-key evil-outer-text-objects-map "A" 'evil-outer-arg))
#+END_SRC

*** evil-cleverparens
#+BEGIN_QUOTE
Evil friendly minor-mode for editing lisp.
#+END_QUOTE
Source: [[https://github.com/luxbock/evil-cleverparens]]
#+BEGIN_SRC emacs-lisp 
(use-package evil-cleverparens
  :disabled t
  :commands 'evil-cleverparens-mode
  :diminish
  :after evil
  :init
  (add-hook 'elisp-mode-hook 'evil-cleverparens-mode)
  (add-hook 'lisp-mode-hook 'evil-cleverparens-mode)
  (add-hook 'scheme-mode-hook 'evil-cleverparens-mode)
  :config
  (evil-cleverparens-mode 1))
#+END_SRC

*** evil-commentary
#+BEGIN_QUOTE
Comment stuff out. A port of vim-commentary.
#+END_QUOTE
Source: [[https://github.com/linktohack/evil-commentary]]
#+BEGIN_SRC emacs-lisp 
(use-package evil-commentary
  :disabled t
  :diminish
  :after evil
  :config
  (evil-commentary-mode 1))
#+END_SRC

*** evil-ediff
#+BEGIN_QUOTE
Make ediff a little evil
#+END_QUOTE
Source: [[https://github.com/emacs-evil/evil-ediff]]
#+BEGIN_SRC emacs-lisp 
(use-package evil-ediff
  :disabled t
  :commands 'evil-ediff-init
  :diminish
  :after evil
  :init
  (add-hook 'ediff-mode-hook 'evil-ediff-init))
#+END_SRC

*** evil-exchange
#+BEGIN_QUOTE
Exchange text more easily within Evil
#+END_QUOTE
Source: [[https://github.com/Dewdrops/evil-exchange]]
#+BEGIN_SRC emacs-lisp 
(use-package evil-exchange
  :disabled t
  :commands 'evil-exchange
  :diminish
  :after evil)
#+END_SRC

*** evil-goggles
#+BEGIN_QUOTE
Add a visual hint to evil operations
#+END_QUOTE
Source: [[https://github.com/edkolev/evil-goggles]]
#+BEGIN_SRC emacs-lisp 
(use-package evil-goggles
  :disabled t
  :diminish
  :after evil)
#+END_SRC

*** evil-iedit-state
#+BEGIN_QUOTE
Evil states to interface iedit mode.
#+END_QUOTE
Source: [[https://github.com/syl20bnr/evil-iedit-state]]
#+BEGIN_SRC emacs-lisp 
(use-package evil-iedit-state
  :disabled t
  :commands 'iedit-mode
  :diminish
  :after evil)
#+END_SRC

*** evil-indent-plus
#+BEGIN_QUOTE
Evil textobjects based on indentation
#+END_QUOTE
Source: [[https://github.com/TheBB/evil-indent-plus]]
#+BEGIN_SRC emacs-lisp 
(use-package evil-indent-plus
  :disabled t
  :diminish
  :after evil
  :config
  (evil-indent-plus-default-bindings))
#+END_SRC

*** evil-lisp-state
#+BEGIN_QUOTE
An evil state to edit Lisp code
#+END_QUOTE
Source: [[https://github.com/syl20bnr/evil-lisp-state]]
#+BEGIN_SRC emacs-lisp 
(use-package evil-lisp-state
  :disabled t
  :commands 'evil-lisp-state
  :diminish
  :after evil)
#+END_SRC

*** evil-matchit
#+BEGIN_QUOTE
Vim matchit ported to Evil
#+END_QUOTE
Source: [[https://github.com/redguardtoo/evil-matchit]]
#+BEGIN_SRC emacs-lisp 
(use-package evil-matchit
  :disabled t
  :commands 'evil-jump-item
  :diminish
  :after evil
  :config
  (global-evil-matchit-mode 1))
#+END_SRC

*** evil-mc
#+BEGIN_QUOTE
Multiple cursors for evil-mode
#+END_QUOTE
Source: [[https://github.com/gabesoft/evil-mc]]
#+BEGIN_SRC emacs-lisp 
(use-package evil-mc
  :disabled t
  :commands (evil-mc-make-cursor-here evil-mc-make-cursor-move-next-line evil-mc-make-cursor-move-prev-line)
  :diminish
  :after evil
  :config
  (global-evil-mc-mode))
#+END_SRC

*** evil-nerd-commenter
#+BEGIN_QUOTE
Comment/uncomment lines efficiently. Like Nerd Commenter in Vim
#+END_QUOTE
Source: [[https://github.com/redguardtoo/evil-nerd-commenter]]
#+BEGIN_SRC emacs-lisp 
(use-package evil-nerd-commenter
  :disabled t
  :diminish
  :after evil)
#+END_SRC

*** evil-numbers
#+BEGIN_QUOTE
increment/decrement numbers like in vim
#+END_QUOTE
Source: [[https://github.com/cofi/evil-numbers]]
#+BEGIN_SRC emacs-lisp 
(use-package evil-numbers
  :disabled t
  :diminish
  :after evil
  :config
  (define-key evil-normal-state-map (kbd "C-c +") 'evil-numbers/inc-at-pt)
  (define-key evil-normal-state-map (kbd "C-c =") 'evil-numbers/inc-at-pt)
  (define-key evil-normal-state-map (kbd "C-c -") 'evil-numbers/dec-at-pt))
#+END_SRC

*** evil-search-highlight-persist
#+BEGIN_QUOTE
Persistent highlights after search
#+END_QUOTE
Source: [[https://github.com/naclander/evil-search-highlight-persist]]
#+BEGIN_SRC emacs-lisp 
(use-package evil-search-highlight-persist
  :disabled t
  :diminish
  :after evil)
#+END_SRC

*** evil-snipe
#+BEGIN_QUOTE
emulate vim-sneak & vim-seek
#+END_QUOTE
Source: [[https://github.com/hlissner/evil-snipe]]
#+BEGIN_SRC emacs-lisp 
(use-package evil-snipe
  :disabled t
  :diminish
  :after evil
  :config
  (add-hook 'magit-mode-hook 'turn-off-evil-snipe-override-mode)
  (evil-snipe-mode 1))
#+END_SRC

*** evil-surround
#+BEGIN_QUOTE
emulate surround.vim from Vim
#+END_QUOTE
Source: [[https://github.com/emacs-evil/evil-surround]]
#+BEGIN_SRC emacs-lisp 
(use-package evil-surround
  :disabled t
  :diminish
  :after evil
  :config
  (global-evil-surround-mode 1))
#+END_SRC

*** evil-terminal-cursor-changer
#+BEGIN_QUOTE
Change cursor shape and color by evil state in terminal
#+END_QUOTE
Source: [[https://github.com/7696122/evil-terminal-cursor-changer]]
#+BEGIN_SRC emacs-lisp 
(use-package evil-terminal-cursor-changer
  :disabled t
  :diminish
  :after evil)
#+END_SRC

*** evil-visual-mark-mode
#+BEGIN_QUOTE
Display evil marks on buffer
#+END_QUOTE
Source: [[https://github.com/roman/evil-visual-mark-mode]]
#+BEGIN_SRC emacs-lisp 
(use-package evil-visual-mark-mode
  :disabled t
  :diminish
  :after evil)
#+END_SRC

*** evil-visualstar
#+BEGIN_QUOTE
Starts a * or # search from the visual selection
#+END_QUOTE
Source: [[https://github.com/bling/evil-visualstar]]
#+BEGIN_SRC emacs-lisp 
(use-package evil-visualstar
  :disabled t
  :diminish
  :after evil
  :config
  (global-evil-visualstar-mode 1))
#+END_SRC

*** evil-tutor
#+BEGIN_QUOTE
Vimtutor adapted to Evil and wrapped in a major-mode
#+END_QUOTE
Source: [[https://github.com/syl20bnr/evil-tutor]]
#+BEGIN_SRC emacs-lisp 
(use-package evil-tutor
  :diminish
  :commands evil-tutor-start
  :after evil)
#+END_SRC
** Emacs
*** diminish
#+BEGIN_QUOTE
Diminished modes are minor modes with no modeline display
#+END_QUOTE
Source: [[https://github.com/myrjola/diminish.el]]
#+BEGIN_SRC emacs-lisp 
(use-package diminish
  :diminish
  :config
  (diminish 'eldoc-mode))
#+END_SRC

*** powerline
#+BEGIN_QUOTE
Rewrite of Powerline
#+END_QUOTE
Source: [[https://github.com/milkypostman/powerline]]
#+BEGIN_SRC emacs-lisp 
(use-package powerline
  :diminish
  :config
  (setq powerline-default-separator 'wave))
#+END_SRC

*** powerline-evil
#+BEGIN_QUOTE
Utilities for better Evil support for Powerline
#+END_QUOTE
Source: [[https://github.com/raugturi/powerline-evil]]
#+BEGIN_SRC emacs-lisp 
(use-package powerline-evil
  :diminish
  :config
  (powerline-default-theme))
#+END_SRC

*** smart-mode-line
#+BEGIN_QUOTE
A color coded smart mode-line.
#+END_QUOTE
Source: [[https://github.com/Malabarba/smart-mode-line]]
#+BEGIN_SRC emacs-lisp 
(use-package smart-mode-line
  :disabled t
  :diminish)
#+END_SRC

*** solarized-theme
#+BEGIN_QUOTE
The Solarized color theme, ported to Emacs.
#+END_QUOTE
Source: [[https://github.com/bbatsov/solarized-emacs]]
#+BEGIN_SRC emacs-lisp 
(use-package solarized-theme
  :diminish
  :config
  (load-theme 'solarized-dark t))
#+END_SRC

*** spaceline
#+BEGIN_QUOTE
Modeline configuration library for powerline
#+END_QUOTE
Source: [[https://github.com/TheBB/spaceline]]
#+BEGIN_SRC emacs-lisp 
(use-package spaceline
  :disabled t
  :diminish
  :config
  (require 'spaceline-config)
  (spaceline-spacemacs-theme)
  (spaceline-toggle-global-on))
#+END_SRC

*** spaceline-all-the-icons
#+BEGIN_QUOTE
A Spaceline theme using All The Icons
#+END_QUOTE
Source: [[https://github.com/domtronn/spaceline-all-the-icons.el]]
#+BEGIN_SRC emacs-lisp 
(use-package spaceline-all-the-icons
  :disabled t
  :diminish
  :after spaceline
  :config
  (spaceline-all-the-icons-theme))
#+END_SRC
** Helm
*** helm
#+BEGIN_QUOTE
Helm is an Emacs incremental and narrowing framework
#+END_QUOTE
Source: [[https://github.com/emacs-helm/helm]]
#+BEGIN_SRC emacs-lisp 
(use-package helm
  :commands
  (helm-mode
   helm-M-x
   helm-find-files
   helm-mini)
  :diminish
  :init
  (define-key global-map (kbd "C-x C-f") 'helm-find-files)
  (define-key global-map (kbd "C-x C-b") 'helm-mini)
  (define-key global-map (kbd "M-x") 'helm-M-x)
  :config
  (define-key helm-map (kbd "C-j") 'helm-next-line)
  (define-key helm-map (kbd "C-k") 'helm-previous-line)
  (define-key helm-map (kbd "C-u") 'helm-previous-page)
  (define-key helm-map (kbd "C-d") 'helm-next-page)
  (add-hook 'helm-find-files-after-init-hook
			(lambda ()
			  (progn
				(define-key helm-find-files-map (kbd "C-h") 'helm-find-files-up-one-level)
				(define-key helm-find-files-map (kbd "C-l") 'helm-ff-RET))))
  (helm-mode 1))
#+END_SRC

*** helm-ag
#+BEGIN_QUOTE
the silver searcher with helm interface
#+END_QUOTE
Source: [[https://github.com/syohex/emacs-helm-ag]]
#+BEGIN_SRC emacs-lisp 
(use-package helm-ag
  :disabled t
  :commands
  (helm-ag
   helm-do-ag
   helm-ag-this-file
   helm-do-ag-this-file
   helm-ag-project-root
   helm-do-ag-project-root
   helm-ag-buffers
   helm-do-ag-buffers
   helm-ag-pop-stack
   helm-ag-clear-stack)
  :diminish
  :after helm)
#+END_SRC

*** helm-c-yasnippet
#+BEGIN_QUOTE
helm source for yasnippet.el
#+END_QUOTE
Source: [[https://github.com/emacs-jp/helm-c-yasnippet]]
#+BEGIN_SRC emacs-lisp 
(use-package helm-c-yasnippet
  :disabled t
  :commands 'helm-yas-complete
  :diminish
  :after helm)
#+END_SRC

*** helm-company
#+BEGIN_QUOTE
Helm interface for company-mode
#+END_QUOTE
Source: [[https://github.com/Sodel-the-Vociferous/helm-company]]
#+BEGIN_SRC emacs-lisp 
(use-package helm-company
  :disabled t
  :commands 'helm-company
  :diminish
  :after helm
  :init
  (add-hook 'company-mode-hook
			(lambda ()
			  (progn
				(define-key company-mode-map (kbd "C-'") 'helm-company)
				(define-key company-active-map (kbd "C-'") 'helm-company)))))
#+END_SRC

*** helm-descbinds
#+BEGIN_QUOTE
A convenient `describe-bindings' with `helm'
#+END_QUOTE
Source: [[https://github.com/emacs-helm/helm-descbinds]]
#+BEGIN_SRC emacs-lisp 
(use-package helm-descbinds
  :disabled t
  :commands 'helm-descbinds
  :diminish
  :after helm
  :init
  (bind-key (kbd "<help> k") 'helm-descbinds)
  :config
  (helm-descbinds-mode))
#+END_SRC

*** helm-flx
#+BEGIN_QUOTE
Sort helm candidates by flx score
#+END_QUOTE
Source: [[https://github.com/PythonNut/helm-flx]]
#+BEGIN_SRC emacs-lisp 
(use-package helm-flx
  :diminish
  :after helm
  :config
  (helm-flx-mode 1)
  (setq helm-flx-for-helm-find-files t
		helm-flx-for-helm-locate t))
#+END_SRC

*** helm-gitignore
#+BEGIN_QUOTE
Generate .gitignore files with gitignore.io.
#+END_QUOTE
Source: [[https://github.com/jupl/helm-gitignore]]
#+BEGIN_SRC emacs-lisp 
(use-package helm-gitignore
  :disabled t
  :commands 'helm-gitignore
  :diminish
  :after helm)
#+END_SRC

*** helm-google
#+BEGIN_QUOTE
Emacs Helm Interface for quick Google searches
#+END_QUOTE
Source: [[https://framagit.org/steckerhalter/helm-google]]
#+BEGIN_SRC emacs-lisp 
(use-package helm-google
  :disabled t
  :diminish
  :after helm)
#+END_SRC

*** helm-gtags
#+BEGIN_QUOTE
GNU GLOBAL helm interface
#+END_QUOTE
Source: [[https://github.com/syohex/emacs-helm-gtags]]
#+BEGIN_SRC emacs-lisp 
(use-package helm-gtags
  :disabled t
  :commands
  (helm-gtags-mode
   helm-gtags-find-tag
   helm-gtags-create-tags
   helm-gtags-update-tags)
  :diminish
  :after helm)
#+END_SRC

*** helm-make
#+BEGIN_QUOTE
Select a Makefile target with helm
#+END_QUOTE
Source: [[https://github.com/abo-abo/helm-make]]
#+BEGIN_SRC emacs-lisp 
(use-package helm-make
  :disabled t
  :commands 'helm-make
  :diminish
  :after helm)
#+END_SRC

*** helm-mode-manager
#+BEGIN_QUOTE
Select and toggle major and minor modes with helm
#+END_QUOTE
Source: [[https://github.com/istib/helm-mode-manager]]
#+BEGIN_SRC emacs-lisp 
(use-package helm-mode-manager
  :disabled t
  :commands
  (helm-switch-major-mode
   helm-enable-minor-mode
   helm-disable-minor-mode)
  :diminish
  :after helm)
#+END_SRC

*** helm-projectile
#+BEGIN_QUOTE
Helm integration for Projectile
#+END_QUOTE
Source: [[https://github.com/bbatsov/helm-projectile]]
#+BEGIN_SRC emacs-lisp 
(use-package helm-projectile
  :disabled t
  :commands
  (helm-projectile
   helm-projectile-find-file
   helm-projectile-switch-project)
  :diminish
  :after helm
  :config
  (helm-projectile-on))
#+END_SRC

*** helm-swoop
#+BEGIN_QUOTE
Efficiently hopping squeezed lines powered by helm interface
#+END_QUOTE
Source: [[https://github.com/ShingoFukuyama/helm-swoop]]
#+BEGIN_SRC emacs-lisp 
(use-package helm-swoop
  :disabled t
  :commands 'helm-swoop
  :diminish
  :after helm)
#+END_SRC
** Git
*** git-timemachine
#+BEGIN_QUOTE
Walk through git revisions of a file
#+END_QUOTE
Source: [[https://gitlab.com/pidu/git-timemachine]]
#+BEGIN_SRC emacs-lisp 
(use-package git-timemachine
  :disabled t
  :commands 'git-timemachine
  :diminish
  :config
  ;; Remove default timemachine mode bindings
  (define-key git-timemachine-mode-map (kbd "n") nil)
  (define-key git-timemachine-mode-map (kbd "p") nil)
  (define-key git-timemachine-mode-map (kbd "w") nil)
  (define-key git-timemachine-mode-map (kbd "W") nil)
  ;; Add my own key bindings
  (define-key git-timemachine-mode-map (kbd "J") 'git-timemachine-show-previous-revision)
  (define-key git-timemachine-mode-map (kbd "K") 'git-timemachine-show-next-revision)
  (define-key git-timemachine-mode-map (kbd "Y") 'git-timemachine-kill-revision)
  (define-key git-timemachine-mode-map (kbd "q") 'git-timemachine-quit)
  ;; Override evil keymap with timemachine's map
  (evil-make-intercept-map git-timemachine-mode-map 'normal)
  (add-hook 'git-timemachine-mode-hook #'evil-normalize-keymaps))
#+END_SRC

*** magit
#+BEGIN_QUOTE
A Git porcelain inside Emacs.
#+END_QUOTE
Source: [[https://github.com/magit/magit]]
#+BEGIN_SRC emacs-lisp 
(use-package magit
  :commands 'magit-status
  :diminish)
#+END_SRC
** Org
*** org
#+BEGIN_QUOTE
Emacs org mode
#+END_QUOTE
Source: [[https://orgmode.org/]]
#+BEGIN_SRC emacs-lisp 
(use-package org
  :commands 'org-mode
  :diminish 'org-indent-mode
  :config
  (define-key global-map (kbd "C-c c") 'my-org-task-capture)
  (setq org-capture-templates
		'(("a" "My TODO task format." entry
		   (file "~/Dropbox/notes/afrl.org")
		   "* TODO %?
SCHEDULED: %t")))

  (defun my-org-task-capture ()
	"Capture a task with my default template."
	(interactive)
	(org-capture nil "a"))

  (setq org-startup-indented 1)
  (setq org-agenda-files '("~/Dropbox/notes/"))
  (setq org-blank-before-new-entry (quote ((heading) (plain-list-item))))
  (setq org-log-done (quote time)))
#+END_SRC

*** org-bullets
#+BEGIN_QUOTE
Show bullets in org-mode as UTF-8 characters
#+END_QUOTE
Source: [[https://github.com/emacsorphanage/org-bullets]]
#+BEGIN_SRC emacs-lisp 
(use-package org-bullets
  :disabled t
  :commands 'org-mode
  :diminish
  :after org)
#+END_SRC

*** org-pomodoro
#+BEGIN_QUOTE
Pomodoro implementation for org-mode.
#+END_QUOTE
Source: [[https://github.com/lolownia/org-pomodoro]]
#+BEGIN_SRC emacs-lisp 
(use-package org-pomodoro
  :disabled t
  :commands 'org-pomodoro
  :diminish
  :after org)
#+END_SRC

*** org-projectile
#+BEGIN_QUOTE
Repository todo management for org-mode
#+END_QUOTE
Source: [[https://github.com/IvanMalison/org-projectile]]
#+BEGIN_SRC emacs-lisp 
(use-package org-projectile
  :disabled t
  :commands 'org-mode
  :diminish
  :after org
  :config
  (define-key global-map (kbd "C-c n p") 'org-projectile-project-todo-completing-read)
  (setq org-projectile-projects-file "~/Dropbox/notes/projects.org")
  (setq org-agenda-files (append org-agenda-files (org-projectile-todo-files)))
  (push (org-projectile-project-todo-entry) org-capture-templates))
#+END_SRC
** Company
*** company
#+BEGIN_QUOTE
Modular text completion framework
#+END_QUOTE
Source: [[https://github.com/company-mode/company-mode]]
#+BEGIN_SRC emacs-lisp 
(use-package company
  :disabled t
  :diminish
  :config
  (evil-make-intercept-map company-active-map 'normal)
  (define-key company-active-map (kbd "C-j") 'company-select-next)
  (define-key company-active-map (kbd "C-k") 'company-select-previous)
  (global-company-mode 1))
#+END_SRC

*** company-quickhelp
#+BEGIN_QUOTE
Popup documentation for completion candidates
#+END_QUOTE
Source: [[https://github.com/expez/company-quickhelp]]
#+BEGIN_SRC emacs-lisp 
(use-package company-quickhelp
  :disabled t
  :diminish
  :after company
  :config
  (company-quickhelp-mode 1))
#+END_SRC

*** company-statistics
#+BEGIN_QUOTE
Sort candidates using completion history
#+END_QUOTE
Source: [[https://github.com/company-mode/company-statistics]]
#+BEGIN_SRC emacs-lisp 
(use-package company-statistics
  :disabled t
  :diminish
  :after company
  :config
  (company-statistics-mode 1))
#+END_SRC

*** company-ycmd
#+BEGIN_QUOTE
company-mode backend for ycmd
#+END_QUOTE
Source: [[https://github.com/abingham/emacs-ycmd]]
#+BEGIN_SRC emacs-lisp 
(use-package company-ycmd
  :disabled t
  :diminish
  :after company
  :config
  (company-ycmd-setup))
#+END_SRC
** Correction
*** auto-dictionary
#+BEGIN_QUOTE
automatic dictionary switcher for flyspell
#+END_QUOTE
Source: [[https://github.com/nschum/auto-dictionary-mode]]
#+BEGIN_SRC emacs-lisp 
(use-package auto-dictionary
  :disabled t
  :diminish
  :after flyspell)
#+END_SRC

*** flycheck
#+BEGIN_QUOTE
On-the-fly syntax checking
#+END_QUOTE
Source: [[https://github.com/flycheck/flycheck]]
#+BEGIN_SRC emacs-lisp 
(use-package flycheck
  :disabled t
  :diminish
  :config
  (global-flycheck-mode 1))
#+END_SRC

*** flycheck-pos-tip
#+BEGIN_QUOTE
Display Flycheck errors in GUI tooltips
#+END_QUOTE
Source: [[https://github.com/flycheck/flycheck-pos-tip]]
#+BEGIN_SRC emacs-lisp 
(use-package flycheck-pos-tip
  :disabled t
  :diminish
  :after flycheck
  :config
  (flycheck-pos-tip-mode))
#+END_SRC

*** helm-flycheck
#+BEGIN_QUOTE
Show flycheck errors with helm
#+END_QUOTE
Source: [[https://github.com/yasuyk/helm-flycheck]]
#+BEGIN_SRC emacs-lisp 
(use-package helm-flycheck
  :disabled t
  :diminish
  :after flycheck)
#+END_SRC

*** flyspell
#+BEGIN_QUOTE
Adds spell check
#+END_QUOTE
Source: [[https://www.emacswiki.org/emacs/FlySpell]]
#+BEGIN_SRC emacs-lisp 
(use-package flyspell
  :disabled t
  :diminish
  :config
  (flyspell-mode 1))
#+END_SRC

*** flyspell-correct
#+BEGIN_QUOTE
correcting words with flyspell via custom interface
#+END_QUOTE
Source: [[https://github.com/d12frosted/flyspell-correct]]
#+BEGIN_SRC emacs-lisp 
(use-package flyspell-correct
  :disabled t
  :commands 'flyspell-correct-previous-word-generic
  :diminish
  :after flyspell
  :init
  (add-hook 'flyspell-mode-hook
			(lambda ()
			  (progn
				(define-key flyspell-mode-map (kbd "C-:") 'flyspell-correct-previous-word-generic)
				(define-key flyspell-mode-map (kbd "C-;") 'flyspell-correct-next-word-generic)))))
#+END_SRC

*** flyspell-correct-helm
#+BEGIN_QUOTE
correcting words with flyspell via helm interface
#+END_QUOTE
Source: [[https://github.com/d12frosted/flyspell-correct]]
#+BEGIN_SRC emacs-lisp 
(use-package flyspell-correct-helm
  :disabled t
  :diminish
  :after (flyspell-correct helm))
#+END_SRC
** Text
*** aggressive-indent
#+BEGIN_QUOTE
Minor mode to aggressively keep your code always indented
#+END_QUOTE
Source: [[https://github.com/Malabarba/aggressive-indent-mode]]
#+BEGIN_SRC emacs-lisp 
(use-package aggressive-indent
  :disabled t
  :diminish
  :config
  (aggressive-indent-global-mode 1))
#+END_SRC

*** auto-yasnippet
#+BEGIN_QUOTE
Quickly create disposable yasnippets
#+END_QUOTE
Source: [[https://github.com/abo-abo/auto-yasnippet]]
#+BEGIN_SRC emacs-lisp 
(use-package auto-yasnippet
  :disabled t
  :diminish)
#+END_SRC

*** clean-aindent-mode
#+BEGIN_QUOTE
Simple indent and unindent, trims indent white-space
#+END_QUOTE
Source: [[https://github.com/pmarinov/clean-aindent-mode]]
#+BEGIN_SRC emacs-lisp 
(use-package clean-aindent-mode
  :disabled t
  :diminish)
#+END_SRC

*** expand-region
#+BEGIN_QUOTE
Increase selected region by semantic units.
#+END_QUOTE
Source: [[https://github.com/magnars/expand-region.el]]
#+BEGIN_SRC emacs-lisp 
(use-package expand-region
  :disabled t
  :diminish)
#+END_SRC

*** indent-guide
#+BEGIN_QUOTE
show vertical lines to guide indentation
#+END_QUOTE
Source: [[https://github.com/zk-phi/indent-guide]]
#+BEGIN_SRC emacs-lisp 
(use-package indent-guide
  :disabled t
  :diminish
  :config
  (indent-guide-global-mode))
#+END_SRC

*** lorem-ipsum
#+BEGIN_QUOTE
Insert dummy pseudo Latin text.
#+END_QUOTE
Source: [[https://github.com/jschaf/emacs-lorem-ipsum]]
#+BEGIN_SRC emacs-lisp 
(use-package lorem-ipsum
  :disabled t
  :diminish)
#+END_SRC

*** move-text
#+BEGIN_QUOTE
Move current line or region with M-up or M-down.
#+END_QUOTE
Source: [[https://github.com/emacsfodder/move-text]]
#+BEGIN_SRC emacs-lisp 
(use-package move-text
  :disabled t
  :diminish)
#+END_SRC

*** origami
#+BEGIN_QUOTE
Flexible text folding
#+END_QUOTE
Source: [[https://github.com/gregsexton/origami.el]]
#+BEGIN_SRC emacs-lisp 
(use-package origami
  :disabled t
  :diminish)
#+END_SRC

*** semantic
#+BEGIN_QUOTE
Allows for language aware editing
#+END_QUOTE
Source: [[https://www.gnu.org/software/emacs/manual/html_node/emacs/Semantic.html]]
#+BEGIN_SRC emacs-lisp 
(use-package semantic
  :disabled t
  :diminish
  :config
  (add-to-list 'semantic-default-submodes 'global-semantic-stickyfunc-mode)
  (semantic-mode 1))
#+END_SRC

*** srefactor
#+BEGIN_QUOTE
A refactoring tool based on Semantic parser framework
#+END_QUOTE
Source: [[https://github.com/tuhdo/semantic-refactor]]
#+BEGIN_SRC emacs-lisp 
(use-package srefactor
  :disabled t
  :diminish
  :config
  (define-key c-mode-map (kbd "M-RET") 'srefactor-refactor-at-point)
  (define-key c++-mode-map (kbd "M-RET") 'srefactor-refactor-at-point)
  (global-set-key (kbd "M-RET o") 'srefactor-lisp-one-line)
  (global-set-key (kbd "M-RET m") 'srefactor-lisp-format-sexp)
  (global-set-key (kbd "M-RET d") 'srefactor-lisp-format-defun)
  (global-set-key (kbd "M-RET b") 'srefactor-lisp-format-buffer))
#+END_SRC

*** ws-butler
#+BEGIN_QUOTE
Unobtrusively remove trailing whitespace.
#+END_QUOTE
Source: [[https://github.com/lewang/ws-butler]]
#+BEGIN_SRC emacs-lisp 
(use-package ws-butler
  :disabled t
  :diminish
  :config
  (ws-butler-global-mode 1))
#+END_SRC

*** yasnippet
#+BEGIN_QUOTE
Yet another snippet extension for Emacs.
#+END_QUOTE
Source: [[https://github.com/joaotavora/yasnippet]]
#+BEGIN_SRC emacs-lisp 
(use-package yasnippet
  :disabled t
  :diminish
  :config
  (yas-global-mode 1))
#+END_SRC
** Utility
*** ace-jump-helm-line
#+BEGIN_QUOTE
Ace-jump to a candidate in helm window
#+END_QUOTE
Source: [[https://github.com/cute-jumper/ace-jump-helm-line]]
#+BEGIN_SRC emacs-lisp 
(use-package ace-jump-helm-line
  :disabled t
  :diminish)
#+END_SRC

*** ace-link
#+BEGIN_QUOTE
Quickly follow links
#+END_QUOTE
Source: [[https://github.com/abo-abo/ace-link]]
#+BEGIN_SRC emacs-lisp 
(use-package ace-link
  :disabled t
  :diminish)
#+END_SRC

*** ag
#+BEGIN_QUOTE
A front-end for ag ('the silver searcher'), the C ack replacement.
#+END_QUOTE
Source: [[https://github.com/Wilfred/ag.el]]
#+BEGIN_SRC emacs-lisp 
(use-package ag
  :disabled t
  :diminish)
#+END_SRC

*** anzu
#+BEGIN_QUOTE
Show number of matches in mode-line while searching
#+END_QUOTE
Source: [[https://github.com/syohex/emacs-anzu]]
#+BEGIN_SRC emacs-lisp 
(use-package anzu
  :disabled t
  :diminish)
#+END_SRC

*** avy
#+BEGIN_QUOTE
Jump to arbitrary positions in visible text and select text quickly.
#+END_QUOTE
Source: [[https://github.com/abo-abo/avy]]
#+BEGIN_SRC emacs-lisp 
(use-package avy
  :disabled t
  :diminish)
#+END_SRC

*** desktop
#+BEGIN_QUOTE
Saves previous session
#+END_QUOTE
Source: [[https://www.gnu.org/software/emacs/manual/html_node/emacs/Saving-Emacs-Sessions.html]]
#+BEGIN_SRC emacs-lisp 
(use-package desktop
  :disabled t
  :diminish)
#+END_SRC

*** ediff
#+BEGIN_QUOTE
Easy diff between two files
#+END_QUOTE
Source: [[https://www.gnu.org/software/emacs/manual/html_node/ediff/]]
#+BEGIN_SRC emacs-lisp 
(use-package ediff
  :disabled t
  :commands 'ediff-files
  :diminish)
#+END_SRC

*** esh-help
#+BEGIN_QUOTE
Add some help functions and support for Eshell
#+END_QUOTE
Source: [[https://github.com/tom-tan/esh-help]]
#+BEGIN_SRC emacs-lisp 
(use-package esh-help
  :disabled t
  :diminish)
#+END_SRC

*** eshell
#+BEGIN_QUOTE
Adds several helpful functions to eShell
#+END_QUOTE
Source: [[https://www.gnu.org/software/emacs/manual/html_mono/eshell.html]]
#+BEGIN_SRC emacs-lisp 
(use-package eshell
  :disabled t
  :diminish)
#+END_SRC

*** exec-path-from-shell
#+BEGIN_QUOTE
Get environment variables such as $PATH from the shell
#+END_QUOTE
Source: [[https://github.com/purcell/exec-path-from-shell]]
#+BEGIN_SRC emacs-lisp 
(use-package exec-path-from-shell
  :disabled t
  :diminish)
#+END_SRC

*** eyebrowse
#+BEGIN_QUOTE
Easy window config switching
#+END_QUOTE
Source: [[https://github.com/wasamasa/eyebrowse]]
#+BEGIN_SRC emacs-lisp 
(use-package eyebrowse
  :disabled t
  :diminish)
#+END_SRC

*** fancy-battery
#+BEGIN_QUOTE
Fancy battery display
#+END_QUOTE
Source: [[https://github.com/lunaryorn/fancy-battery.el]]
#+BEGIN_SRC emacs-lisp 
(use-package fancy-battery
  :disabled t
  :diminish
  :config
  (fancy-battery-mode)
  (setq fancy-battery-show-percentage 1))
#+END_SRC

*** fasd
#+BEGIN_QUOTE
Emacs integration for the command-line productivity booster `fasd'
#+END_QUOTE
Source: [[https://github.com/steckerhalter/emacs-fasd]]
#+BEGIN_SRC emacs-lisp 
(use-package fasd
  :disabled t
  :diminish)
#+END_SRC

*** floobits
#+BEGIN_QUOTE
Floobits plugin for real-time collaborative editing
#+END_QUOTE
Source: [[https://github.com/Floobits/floobits-emacs]]
#+BEGIN_SRC emacs-lisp 
(use-package floobits
  :disabled t
  :diminish)
#+END_SRC

*** fuzzy
#+BEGIN_QUOTE
Fuzzy Matching
#+END_QUOTE
Source: [[https://github.com/auto-complete/fuzzy-el]]
#+BEGIN_SRC emacs-lisp 
(use-package fuzzy
  :disabled t
  :diminish)
#+END_SRC

*** hide-comnt
#+BEGIN_QUOTE
Allows user to hide comments
#+END_QUOTE
Source: [[https://www.emacswiki.org/emacs/HideOrIgnoreComments#toc1]]
#+BEGIN_SRC emacs-lisp 
(use-package hide-comnt
  :disabled t
  :diminish)
#+END_SRC

*** hydra
#+BEGIN_QUOTE
Make bindings that stick around.
#+END_QUOTE
Source: [[https://github.com/abo-abo/hydra]]
#+BEGIN_SRC emacs-lisp 
(use-package hydra
  :disabled t
  :diminish)
#+END_SRC

*** link-hint
#+BEGIN_QUOTE
Use avy to open, copy, etc. visible links.
#+END_QUOTE
Source: [[https://github.com/noctuid/link-hint.el]]
#+BEGIN_SRC emacs-lisp 
(use-package link-hint
  :disabled t
  :diminish)
#+END_SRC

*** mmm-mode
#+BEGIN_QUOTE
Allows for multiple major modes
#+END_QUOTE
Source: [[https://github.com/purcell/mmm-mode]]
#+BEGIN_SRC emacs-lisp 
(use-package mmm-mode
  :disabled t
  :diminish)
#+END_SRC

*** multi-term
#+BEGIN_QUOTE
Managing multiple terminal buffers in Emacs.
#+END_QUOTE
Source: [[https://github.com/emacsorphanage/multi-term]]
#+BEGIN_SRC emacs-lisp 
(use-package multi-term
  :disabled t
  :diminish)
#+END_SRC

*** open-junk-file
#+BEGIN_QUOTE
Open a junk (memo) file to try-and-error
#+END_QUOTE
Source: [[https://github.com/rubikitch/open-junk-file]]
#+BEGIN_SRC emacs-lisp 
(use-package open-junk-file
  :disabled t
  :diminish)
#+END_SRC

*** persp-mode
#+BEGIN_QUOTE
windows/buffers sets shared among frames + save/load.
#+END_QUOTE
Source: [[https://github.com/Bad-ptr/persp-mode.el]]
#+BEGIN_SRC emacs-lisp 
(use-package persp-mode
  :disabled t
  :diminish)
#+END_SRC

*** popwin
#+BEGIN_QUOTE
Popup Window Manager.
#+END_QUOTE
Source: [[https://github.com/m2ym/popwin-el]]
#+BEGIN_SRC emacs-lisp 
(use-package popwin
  :disabled t
  :diminish
  :config
  (popwin-mode 1))
#+END_SRC

*** pos-tip
#+BEGIN_QUOTE
Show tooltip at point
#+END_QUOTE
Source: [[https://github.com/pitkali/pos-tip]]
#+BEGIN_SRC emacs-lisp 
(use-package pos-tip
  :disabled t
  :diminish)
#+END_SRC

*** projectile
#+BEGIN_QUOTE
Manage and navigate projects in Emacs easily
#+END_QUOTE
Source: [[https://github.com/bbatsov/projectile]]
#+BEGIN_SRC emacs-lisp 
(use-package projectile
  :disabled t
  :commands (projectile-find-file projectile-switch-project)
  :diminish
  :init
  (defvar jag--projectile-keys (make-sparse-keymap)
	"Key map for projectile")
  (define-key jag--projectile-keys (kbd "p") 'helm-projectile-switch-project)
  (define-key jag--projectile-keys (kbd "f") 'helm-projectile-find-file)
  (define-key global-map (kbd "<projectile>") jag--projectile-keys)
  :config
  (setq projectile-completion-system 'helm)
  (projectile-mode 1))
#+END_SRC

*** restart-emacs
#+BEGIN_QUOTE
Restart emacs from within emacs
#+END_QUOTE
Source: [[https://github.com/iqbalansari/restart-emacs]]
#+BEGIN_SRC emacs-lisp 
(use-package restart-emacs
  :commands 'restart-emacs
  :diminish)
#+END_SRC

*** spray
#+BEGIN_QUOTE
a speed reading mode
#+END_QUOTE
Source: [[https://gitlab.com/iankelling/spray]]
#+BEGIN_SRC emacs-lisp 
(use-package spray
  :disabled t
  :diminish)
#+END_SRC

*** tiny-menu
#+BEGIN_QUOTE
Display tiny menus.
#+END_QUOTE
Source: [[https://github.com/aaronbieber/tiny-menu.el]]
#+BEGIN_SRC emacs-lisp 
(use-package tiny-menu
  :disabled t
  :diminish)
#+END_SRC

*** virtualenvwrapper
#+BEGIN_QUOTE
a featureful virtualenv tool for Emacs
#+END_QUOTE
Source: [[https://github.com/porterjamesj/virtualenvwrapper.el]]
#+BEGIN_SRC emacs-lisp 
(use-package virtualenvwrapper
  :disabled t
  :diminish)
#+END_SRC

*** wgrep-ag
#+BEGIN_QUOTE
Writable ag buffer and apply the changes to files
#+END_QUOTE
Source: [[https://github.com/mhayashi1120/Emacs-wgrep]]
#+BEGIN_SRC emacs-lisp 
(use-package wgrep-ag
  :disabled t
  :diminish)
#+END_SRC

*** which-key
#+BEGIN_QUOTE
Display available keybindings in popup
#+END_QUOTE
Source: [[https://github.com/justbur/emacs-which-key]]
#+BEGIN_SRC emacs-lisp 
(use-package which-key
  :disabled t
  :diminish
  :config
  (which-key-mode))
#+END_SRC

*** winum
#+BEGIN_QUOTE
Navigate windows and frames using numbers.
#+END_QUOTE
Source: [[https://github.com/deb0ch/emacs-winum]]
#+BEGIN_SRC emacs-lisp 
(use-package winum
  :disabled t
  :diminish)
#+END_SRC

*** ycmd
#+BEGIN_QUOTE
emacs bindings to the ycmd completion server
#+END_QUOTE
Source: [[https://github.com/abingham/emacs-ycmd]]
#+BEGIN_SRC emacs-lisp 
(use-package ycmd
  :disabled t
  :diminish)
#+END_SRC

*** zeal-at-point
#+BEGIN_QUOTE
Search the word at point with Zeal
#+END_QUOTE
Source: [[https://github.com/jinzhu/zeal-at-point]]
#+BEGIN_SRC emacs-lisp 
(use-package zeal-at-point
  :disabled t
  :diminish)
#+END_SRC

*** zoom-frm
#+BEGIN_QUOTE
Zoom font size
#+END_QUOTE
Source: [[https://github.com/emacsmirror/zoom-frm]]
#+BEGIN_SRC emacs-lisp 
(use-package zoom-frm
  :disabled t
  :diminish)
#+END_SRC
** Visual
*** adaptive-wrap
#+BEGIN_QUOTE
Wraps the buffer automatically and adapts the size without changing buffer
#+END_QUOTE
Source: [[http://elpa.gnu.org/packages/adaptive-wrap.html]]
#+BEGIN_SRC emacs-lisp 
(use-package adaptive-wrap
  :disabled t
  :commands 'adaptive-wrap-prefix-mode
  :diminish
  :config
  (add-hook 'prog-mode-hook 'adaptive-wrap-prefix-mode))
#+END_SRC

*** all-the-icons
#+BEGIN_QUOTE
A library for inserting Developer icons
#+END_QUOTE
Source: [[https://github.com/domtronn/all-the-icons.el]]
#+BEGIN_SRC emacs-lisp 
(use-package all-the-icons
  :disabled t
  :diminish)
#+END_SRC

*** all-the-icons-dired
#+BEGIN_QUOTE
Shows icons for each file in dired mode
#+END_QUOTE
Source: [[https://github.com/jtbm37/all-the-icons-dired]]
#+BEGIN_SRC emacs-lisp 
(use-package all-the-icons-dired
  :disabled t
  :diminish)
#+END_SRC

*** auto-highlight-symbol
#+BEGIN_QUOTE
Automatic highlighting current symbol minor mode
#+END_QUOTE
Source: [[https://github.com/gennad/auto-highlight-symbol]]
#+BEGIN_SRC emacs-lisp 
(use-package auto-highlight-symbol
  :disabled t
  :commands 'auto-highlight-symbol-mode
  :diminish
  :config
  (add-hook 'prog-mode-hook 'auto-highlight-symbol-mode))
#+END_SRC

*** centered-cursor-mode
#+BEGIN_QUOTE
cursor stays vertically centered
#+END_QUOTE
Source: [[https://github.com/andre-r/centered-cursor-mode.el]]
#+BEGIN_SRC emacs-lisp 
(use-package centered-cursor-mode
  :disabled t
  :commands 'centered-cursor-mode
  :diminish
  :config
  (global-centered-cursor-mode))
#+END_SRC

*** column-enforce-mode
#+BEGIN_QUOTE
Highlight text that extends beyond a  column
#+END_QUOTE
Source: [[https://github.com/jordonbiondo/column-enforce-mode]]
#+BEGIN_SRC emacs-lisp 
(use-package column-enforce-mode
  :disabled t
  :commands 'column-enforce-mode
  :diminish)
#+END_SRC

*** diff-hl
#+BEGIN_QUOTE
Highlight uncommitted changes using VC
#+END_QUOTE
Source: [[https://github.com/dgutov/diff-hl]]
#+BEGIN_SRC emacs-lisp 
(use-package diff-hl
  :disabled t
  :commands 'diff-hl-mode
  :diminish
  :config
  (add-hook 'prog-mode-hook 'diff-hl-mode))
#+END_SRC

*** golden-ratio
#+BEGIN_QUOTE
Automatic resizing of Emacs windows to the golden ratio
#+END_QUOTE
Source: [[https://github.com/roman/golden-ratio.el]]
#+BEGIN_SRC emacs-lisp 
(use-package golden-ratio
  :disabled t
  :diminish
  :config
  (add-to-list 'golden-ratio-exclude-buffer-names " *MINIMAP*")
  (golden-ratio-mode 1))
#+END_SRC

*** highlight-numbers
#+BEGIN_QUOTE
Highlight numbers in source code
#+END_QUOTE
Source: [[https://github.com/Fanael/highlight-numbers]]
#+BEGIN_SRC emacs-lisp 
(use-package highlight-numbers
  :disabled t
  :diminish
  :config
  (add-hook 'prog-mode-hook 'highlight-numbers-mode))
#+END_SRC

*** highlight-parentheses
#+BEGIN_QUOTE
highlight surrounding parentheses
#+END_QUOTE
Source: [[https://github.com/tsdh/highlight-parentheses.el]]
#+BEGIN_SRC emacs-lisp 
(use-package highlight-parentheses
  :disabled t
  :diminish
  :config
  (global-highlight-parentheses-mode))
#+END_SRC

*** highlight-symbol
#+BEGIN_QUOTE
automatic and manual symbol highlighting
#+END_QUOTE
Source: [[https://github.com/nschum/highlight-symbol.el]]
#+BEGIN_SRC emacs-lisp 
(use-package highlight-symbol
  :disabled t
  :diminish
  :config
  (global-auto-highlight-symbol-mode 1))
#+END_SRC

*** hl-todo
#+BEGIN_QUOTE
highlight TODO and similar keywords
#+END_QUOTE
Source: [[https://github.com/tarsius/hl-todo]]
#+BEGIN_SRC emacs-lisp 
(use-package hl-todo
  :disabled t
  :diminish
  :config
  (add-hook 'prog-mode-hook 'hl-todo-mode))
#+END_SRC

*** imenu-list
#+BEGIN_QUOTE
Show imenu entries in a separate buffer
#+END_QUOTE
Source: [[https://github.com/bmag/imenu-list]]
#+BEGIN_SRC emacs-lisp 
(use-package imenu-list
  :disabled t
  :diminish)
#+END_SRC

*** minimap
#+BEGIN_QUOTE
Adds a minimap as a sidebar
#+END_QUOTE
Source: [[https://github.com/dengste/minimap]]
#+BEGIN_SRC emacs-lisp 
(use-package minimap
  :disabled t
  :commands 'minimap-mode
  :diminish
  :init
  (add-hook 'prog-mode-hook 'minimap-mode)
  :config
  (setq minimap-width-fraction 0.10)
  (setq minimap-minimum-width 15)
  (setq minimap-window-location 'right))
#+END_SRC

*** nlinum-relative
#+BEGIN_QUOTE
Relative line number with nlinum
#+END_QUOTE
Source: [[https://github.com/CodeFalling/nlinum-relative]]
#+BEGIN_SRC emacs-lisp 
(use-package nlinum-relative
  :disabled t
  :commands 'nlinum-relative-mode
  :diminish
  :init
  (add-hook 'prog-mode-hook 'nlinum-relative-mode)
  :config
  (nlinum-relative-setup-evil))
#+END_SRC

*** rainbow-delimiters
#+BEGIN_QUOTE
Highlight brackets according to their depth
#+END_QUOTE
Source: [[https://github.com/Fanael/rainbow-delimiters]]
#+BEGIN_SRC emacs-lisp 
(use-package rainbow-delimiters
  :disabled t
  :diminish)
#+END_SRC

*** rainbow-mode
#+BEGIN_QUOTE
Colorize color names
#+END_QUOTE
Source: [[https://github.com/emacsmirror/rainbow-mode]]
#+BEGIN_SRC emacs-lisp 
(use-package rainbow-mode
  :disabled t
  :diminish
  :config
  (add-hook 'prog-mode-hook 'rainbow-mode))
#+END_SRC

*** volatile-highlights
#+BEGIN_QUOTE
Minor mode for visual feedback on some operations.
#+END_QUOTE
Source: [[https://github.com/k-talo/volatile-highlights.el]]
#+BEGIN_SRC emacs-lisp 
(use-package volatile-highlights
  :disabled t
  :diminish
  :config
  (volatile-highlights-mode t))
#+END_SRC
** Web
*** bbdb
#+BEGIN_QUOTE
The Insidious Big Brother Database for GNU Emacs
#+END_QUOTE
Source: [[https://www.emacswiki.org/emacs/BbdbMode]]
#+BEGIN_SRC emacs-lisp 
(use-package bbdb
  :disabled t
  :diminish)
#+END_SRC

*** engine-mode
#+BEGIN_QUOTE
Define and query search engines from within Emacs.
#+END_QUOTE
Source: [[https://github.com/hrs/engine-mode]]
#+BEGIN_SRC emacs-lisp 
(use-package engine-mode
  :disabled t
  :diminish)
#+END_SRC

*** google-this
#+BEGIN_QUOTE
A set of functions and bindings to google under point.
#+END_QUOTE
Source: [[https://github.com/Malabarba/emacs-google-this]]
#+BEGIN_SRC emacs-lisp 
(use-package google-this
  :disabled t
  :diminish)
#+END_SRC

*** gnus
#+BEGIN_QUOTE
Reading email from emacs
#+END_QUOTE
Source: [[https://www.emacswiki.org/emacs/GnusTutorial]]
#+BEGIN_SRC emacs-lisp 
(use-package gnus
  :disabled t
  :diminish)
#+END_SRC
** Fun
*** xkcd
#+BEGIN_QUOTE
View xkcd from Emacs
#+END_QUOTE
Source: [[https://github.com/vibhavp/emacs-xkcd]]
#+BEGIN_SRC emacs-lisp 
(use-package xkcd
  :disabled t
  :commands 'xkcd
  :diminish)
#+END_SRC
* Language Packages
** Asm
*** asm-mode
#+BEGIN_QUOTE
Asm major mode for emacs
#+END_QUOTE
Source: [[https://www.gnu.org/software/emacs/manual/html_node/emacs/Asm-Mode.html]]
#+BEGIN_SRC emacs-lisp 
(use-package asm-mode
  :disabled t
  :commands 'asm-mode
  :diminish)
#+END_SRC

*** nasm-mode
#+BEGIN_QUOTE
NASM x86 assembly major mode
#+END_QUOTE
Source: [[https://github.com/skeeto/nasm-mode]]
#+BEGIN_SRC emacs-lisp 
(use-package nasm-mode
  :disabled t
  :commands 'nasm-mode
  :diminish)
#+END_SRC

*** x86-lookup
#+BEGIN_QUOTE
jump to x86 instruction documentation
#+END_QUOTE
Source: [[https://github.com/skeeto/x86-lookup]]
#+BEGIN_SRC emacs-lisp 
(use-package x86-lookup
  :disabled t
  :commands 'x86-lookup
  :diminish)
#+END_SRC
** Emacs-lisp
*** auto-compile
#+BEGIN_QUOTE
automatically compile Emacs Lisp libraries
#+END_QUOTE
Source: [[https://github.com/emacscollective/auto-compile]]
#+BEGIN_SRC emacs-lisp 
(use-package auto-compile
  :disabled t
  :commands (auto-compile-on-save-mode auto-compile-on-load-mode)
  :diminish)
#+END_SRC

*** edebug
#+BEGIN_QUOTE
Build in elisp debugger
#+END_QUOTE
Source: [[https://www.gnu.org/software/emacs/manual/html_node/elisp/Edebug.html]]
#+BEGIN_SRC emacs-lisp 
(use-package edebug
  :disabled t
  :commands 'edebug
  :diminish)
#+END_SRC

*** elisp-slime-nav
#+BEGIN_QUOTE
Make M-. and M-, work in elisp like they do in slime
#+END_QUOTE
Source: [[https://github.com/purcell/elisp-slime-nav]]
#+BEGIN_SRC emacs-lisp 
(use-package elisp-slime-nav
  :disabled t
  :commands 'elisp-slime-nav-mode
  :diminish)
#+END_SRC

*** ielm
#+BEGIN_QUOTE
Elisp Interperter
#+END_QUOTE
Source: [[https://www.emacswiki.org/emacs/InferiorEmacsLispMode]]
#+BEGIN_SRC emacs-lisp 
(use-package ielm
  :disabled t
  :commands 'ielm
  :diminish)
#+END_SRC

*** macrostep
#+BEGIN_QUOTE
interactive macro expander
#+END_QUOTE
Source: [[https://github.com/joddie/macrostep]]
#+BEGIN_SRC emacs-lisp 
(use-package macrostep
  :disabled t
  :commands 'macrostep-mode
  :diminish)
#+END_SRC
** Go
*** company-go
#+BEGIN_QUOTE
company-mode backend for Go (using gocode)
#+END_QUOTE
Source: [[https://github.com/nsf/gocode]]
#+BEGIN_SRC emacs-lisp 
(use-package company-go
  :disabled t
  :commands 'go-mode
  :diminish
  :after company)
#+END_SRC

*** flycheck-gometalinter
#+BEGIN_QUOTE
flycheck checker for gometalinter
#+END_QUOTE
Source: [[https://github.com/favadi/flycheck-gometalinter]]
#+BEGIN_SRC emacs-lisp 
(use-package flycheck-gometalinter
  :disabled t
  :commands 'go-mode
  :diminish
  :after flycheck)
#+END_SRC

*** go-mode
#+BEGIN_QUOTE
Major mode for the Go programming language
#+END_QUOTE
Source: [[https://github.com/dominikh/go-mode.el]]
#+BEGIN_SRC emacs-lisp 
(use-package go-mode
  :disabled t
  :commands 'go-mode
  :diminish)
#+END_SRC

*** go-rename
#+BEGIN_QUOTE
Integration of the 'gorename' tool into Emacs.
#+END_QUOTE
Source: [[https://github.com/dominikh/go-mode.el]]
#+BEGIN_SRC emacs-lisp 
(use-package go-rename
  :disabled t
  :commands 'go-mode
  :diminish)
#+END_SRC
** Haskell
*** cmm-mode
#+BEGIN_QUOTE
Major mode for C-- source code
#+END_QUOTE
Source: [[https://github.com/bgamari/cmm-mode]]
#+BEGIN_SRC emacs-lisp 
(use-package cmm-mode
  :disabled t
  :commands 'cmm-mode
  :diminish)
#+END_SRC

*** company-cabal
#+BEGIN_QUOTE
company-mode cabal backend
#+END_QUOTE
Source: [[https://github.com/iquiw/company-cabal]]
#+BEGIN_SRC emacs-lisp 
(use-package company-cabal
  :disabled t
  :diminish
  :after company)
#+END_SRC

*** company-ghc
#+BEGIN_QUOTE
company-mode ghc-mod backend
#+END_QUOTE
Source: [[https://github.com/iquiw/company-ghc]]
#+BEGIN_SRC emacs-lisp 
(use-package company-ghc
  :disabled t
  :diminish
  :after company)
#+END_SRC

*** company-ghci
#+BEGIN_QUOTE
company backend which uses the current ghci process.
#+END_QUOTE
Source: [[https://github.com/juiko/company-ghci]]
#+BEGIN_SRC emacs-lisp 
(use-package company-ghci
  :disabled t
  :diminish
  :after company)
#+END_SRC

*** flycheck-haskell
#+BEGIN_QUOTE
Flycheck: Automatic Haskell configuration
#+END_QUOTE
Source: [[https://github.com/flycheck/flycheck-haskell]]
#+BEGIN_SRC emacs-lisp 
(use-package flycheck-haskell
  :disabled t
  :diminish
  :after flycheck)
#+END_SRC

*** ghc
#+BEGIN_QUOTE
Sub mode for Haskell mode
#+END_QUOTE
Source: [[https://github.com/DanielG/ghc-mod]]
#+BEGIN_SRC emacs-lisp 
(use-package ghc
  :disabled t
  :diminish)
#+END_SRC

*** haskell-mode
#+BEGIN_QUOTE
A Haskell editing mode
#+END_QUOTE
Source: [[https://github.com/haskell/haskell-mode]]
#+BEGIN_SRC emacs-lisp 
(use-package haskell-mode
  :disabled t
  :diminish)
#+END_SRC

*** helm-hoogle
#+BEGIN_QUOTE
Use helm to navigate query results from Hoogle
#+END_QUOTE
Source: [[https://github.com/jwiegley/helm-hoogle]]
#+BEGIN_SRC emacs-lisp 
(use-package helm-hoogle
  :disabled t
  :diminish)
#+END_SRC

*** hindent
#+BEGIN_QUOTE
Indent haskell code using the "hindent" program
#+END_QUOTE
Source: [[https://github.com/chrisdone/hindent]]
#+BEGIN_SRC emacs-lisp 
(use-package hindent
  :disabled t
  :diminish)
#+END_SRC

*** hlint-refactor
#+BEGIN_QUOTE
Apply HLint suggestions
#+END_QUOTE
Source: [[https://github.com/mpickering/hlint-refactor-mode]]
#+BEGIN_SRC emacs-lisp 
(use-package hlint-refactor
  :disabled t
  :diminish)
#+END_SRC

*** intero
#+BEGIN_QUOTE
Complete development mode for Haskell
#+END_QUOTE
Source: [[https://github.com/commercialhaskell/intero]]
#+BEGIN_SRC emacs-lisp 
(use-package intero
  :disabled t
  :diminish)
#+END_SRC
** Java
*** company-emacs-eclim
#+BEGIN_QUOTE
company-mode backend for eclim
#+END_QUOTE
Source: [[https://github.com/emacs-eclim/emacs-eclim]]
#+BEGIN_SRC emacs-lisp 
(use-package company-emacs-eclim
  :disabled t
  :commands 'java-mode
  :diminish)
#+END_SRC

*** eclim
#+BEGIN_QUOTE
An interface to the Eclipse IDE.
#+END_QUOTE
Source: [[https://github.com/emacs-eclim/emacs-eclim]]
#+BEGIN_SRC emacs-lisp 
(use-package eclim
  :disabled t
  :commands 'java-mode
  :diminish)
#+END_SRC
** Javascript
*** coffee-mode
#+BEGIN_QUOTE
Major mode for CoffeeScript code
#+END_QUOTE
Source: [[https://github.com/defunkt/coffee-mode]]
#+BEGIN_SRC emacs-lisp 
(use-package coffee-mode
  :disabled t
  :diminish)
#+END_SRC

*** company-tern
#+BEGIN_QUOTE
Tern backend for company-mode
#+END_QUOTE
Source: [[https://github.com/proofit404/company-tern]]
#+BEGIN_SRC emacs-lisp 
(use-package company-tern
  :disabled t
  :diminish)
#+END_SRC

*** js-doc
#+BEGIN_QUOTE
Insert JsDoc style comment easily
#+END_QUOTE
Source: [[https://github.com/mooz/js-doc]]
#+BEGIN_SRC emacs-lisp 
(use-package js-doc
  :disabled t
  :diminish)
#+END_SRC

*** js2-mode
#+BEGIN_QUOTE
Improved JavaScript editing mode
#+END_QUOTE
Source: [[https://github.com/mooz/js2-mode]]
#+BEGIN_SRC emacs-lisp 
(use-package js2-mode
  :disabled t
  :diminish)
#+END_SRC

*** js2-refactor
#+BEGIN_QUOTE
A JavaScript refactoring library for emacs.
#+END_QUOTE
Source: [[https://github.com/magnars/js2-refactor.el]]
#+BEGIN_SRC emacs-lisp 
(use-package js2-refactor
  :disabled t
  :diminish)
#+END_SRC

*** json-mode
#+BEGIN_QUOTE
Major mode for editing JSON files.
#+END_QUOTE
Source: [[https://github.com/joshwnj/json-mode]]
#+BEGIN_SRC emacs-lisp 
(use-package json-mode
  :disabled t
  :diminish)
#+END_SRC

*** json-snatcher
#+BEGIN_QUOTE
Grabs the path to JSON values in a JSON file
#+END_QUOTE
Source: [[https://github.com/Sterlingg/json-snatcher]]
#+BEGIN_SRC emacs-lisp 
(use-package json-snatcher
  :disabled t
  :diminish)
#+END_SRC

*** livid-mode
#+BEGIN_QUOTE
Live browser eval of JavaScript every time a buffer changes
#+END_QUOTE
Source: [[https://github.com/pandeiro/livid-mode]]
#+BEGIN_SRC emacs-lisp 
(use-package livid-mode
  :disabled t
  :diminish)
#+END_SRC

*** skewer-mode
#+BEGIN_QUOTE
live browser JavaScript, CSS, and HTML interaction
#+END_QUOTE
Source: [[https://github.com/skeeto/skewer-mode]]
#+BEGIN_SRC emacs-lisp 
(use-package skewer-mode
  :disabled t
  :diminish)
#+END_SRC

*** tern
#+BEGIN_QUOTE
Tern-powered JavaScript integration
#+END_QUOTE
Source: [[https://github.com/ternjs/tern]]
#+BEGIN_SRC emacs-lisp 
(use-package tern
  :disabled t
  :diminish)
#+END_SRC

*** web-beautify
#+BEGIN_QUOTE
Format HTML, CSS and JavaScript/JSON
#+END_QUOTE
Source: [[https://github.com/yasuyk/web-beautify]]
#+BEGIN_SRC emacs-lisp 
(use-package web-beautify
  :disabled t
  :diminish)
#+END_SRC
** Lua
*** lua-mode
#+BEGIN_QUOTE
a major-mode for editing Lua scripts
#+END_QUOTE
Source: [[https://github.com/immerrr/lua-mode]]
#+BEGIN_SRC emacs-lisp 
(use-package lua-mode
  :disabled t
  :commands 'lua-mode
  :diminish)
#+END_SRC
** Python
*** anaconda-mode
#+BEGIN_QUOTE
Code navigation, documentation lookup and completion for Python
#+END_QUOTE
Source: [[https://github.com/proofit404/anaconda-mode]]
#+BEGIN_SRC emacs-lisp 
(use-package anaconda-mode
  :disabled t
  :diminish)
#+END_SRC

*** company-anaconda
#+BEGIN_QUOTE
Anaconda backend for company-mode
#+END_QUOTE
Source: [[https://github.com/proofit404/company-anaconda]]
#+BEGIN_SRC emacs-lisp 
(use-package company-anaconda
  :disabled t
  :diminish)
#+END_SRC

*** cython-mode
#+BEGIN_QUOTE
Major mode for editing Cython files
#+END_QUOTE
Source: [[https://github.com/cython/cython]]
#+BEGIN_SRC emacs-lisp 
(use-package cython-mode
  :disabled t
  :diminish)
#+END_SRC

*** elpy
#+BEGIN_QUOTE
Emacs Python Development Environment
#+END_QUOTE
Source: [[https://github.com/jorgenschaefer/elpy]]
#+BEGIN_SRC emacs-lisp 
(use-package elpy
  :disabled t
  :diminish
  :config
  (setq elpy-modules (remove 'elpy-module-highlight-indentation elpy-modules))
  (add-hook 'python-mode-hook 'elpy-mode))
#+END_SRC

*** helm-pydoc
#+BEGIN_QUOTE
pydoc with helm interface
#+END_QUOTE
Source: [[https://github.com/syohex/emacs-helm-pydoc]]
#+BEGIN_SRC emacs-lisp 
(use-package helm-pydoc
  :disabled t
  :diminish)
#+END_SRC

*** hy-mode
#+BEGIN_QUOTE
Major mode for Hylang
#+END_QUOTE
Source: [[https://github.com/hylang/hy-mode]]
#+BEGIN_SRC emacs-lisp 
(use-package hy-mode
  :disabled t
  :diminish)
#+END_SRC

*** live-py-mode
#+BEGIN_QUOTE
Live Coding in Python
#+END_QUOTE
Source: [[https://github.com/donkirkby/live-py-plugin]]
#+BEGIN_SRC emacs-lisp 
(use-package live-py-mode
  :disabled t
  :diminish)
#+END_SRC

*** nose
#+BEGIN_QUOTE
Easy Python test running in Emacs
#+END_QUOTE
Source: [[https://bitbucket.com/durin42/nosemacs]]
#+BEGIN_SRC emacs-lisp 
(use-package nose
  :disabled t
  :diminish)
#+END_SRC

*** pip-requirements
#+BEGIN_QUOTE
A major mode for editing pip requirements files.
#+END_QUOTE
Source: [[https://github.com/Wilfred/pip-requirements.el]]
#+BEGIN_SRC emacs-lisp 
(use-package pip-requirements
  :disabled t
  :diminish)
#+END_SRC

*** py-isort
#+BEGIN_QUOTE
Use isort to sort the imports in a Python buffer
#+END_QUOTE
Source: [[https://github.com/paetzke/py-isort.el]]
#+BEGIN_SRC emacs-lisp 
(use-package py-isort
  :disabled t
  :diminish)
#+END_SRC

*** pyenv-mode
#+BEGIN_QUOTE
Integrate pyenv with python-mode
#+END_QUOTE
Source: [[https://github.com/proofit404/pyenv-mode]]
#+BEGIN_SRC emacs-lisp 
(use-package pyenv-mode
  :disabled t
  :diminish)
#+END_SRC

*** pyvenv
#+BEGIN_QUOTE
Python virtual environment interface
#+END_QUOTE
Source: [[https://github.com/jorgenschaefer/pyvenv]]
#+BEGIN_SRC emacs-lisp 
(use-package pyvenv
  :disabled t
  :diminish
  :config
  (pyvenv-mode 1))
#+END_SRC

*** pytest
#+BEGIN_QUOTE
Easy Python test running in Emacs
#+END_QUOTE
Source: [[https://github.com/ionrock/pytest-el]]
#+BEGIN_SRC emacs-lisp 
(use-package pytest
  :disabled t
  :diminish)
#+END_SRC

*** python
#+BEGIN_QUOTE
Python mode
#+END_QUOTE
Source: [[https://www.emacswiki.org/emacs/PythonProgrammingInEmacs]]
#+BEGIN_SRC emacs-lisp 
(use-package python
  :disabled t
  :diminish)
#+END_SRC

*** yapfify
#+BEGIN_QUOTE
(automatically) format python buffers using YAPF.
#+END_QUOTE
Source: [[https://github.com/JorisE/yapfify]]
#+BEGIN_SRC emacs-lisp 
(use-package yapfify
  :disabled t
  :diminish)
#+END_SRC
